plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.github.triplet.play' version '2.2.0'
}

apply from: 'ThemerConstants.gradle'
apply from: 'AdvancedTasks.gradle'

android {
    compileSdkVersion 28

    defaultConfig {
        targetSdkVersion 28
        versionCode 39
        versionName "31.1-2"

        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
        buildConfigField "boolean", "ENABLE_APP_BLACKLIST_CHECK", "" + ENABLE_APP_BLACKLIST_CHECK
        buildConfigField "boolean", "ENFORCE_GOOGLE_PLAY_INSTALL", "" + ENFORCE_GOOGLE_PLAY_INSTALL
        buildConfigField "boolean", "ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS", "" + ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        resValue "string", "encryption_status", (shouldEncrypt() ? "onCompileVerify" : "false")
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
        etherealRelease {
            storeFile file("EtherealKey.jks")
            storePassword System.getenv("SIGNING_KEY_PASSWORD") // ANDROID_STORE_PASSWORD
            keyAlias "outlinedark"
            keyPassword System.getenv("SIGNING_KEY_PASSWORD") // ANDROID_KEY_PASSWORD
        }
        outlineRelease {
            storeFile file("OutlineKey.jks")
            storePassword System.getenv("SIGNING_KEY_PASSWORD") // ANDROID_STORE_PASSWORD
            keyAlias "outlinekey"
            keyPassword System.getenv("SIGNING_KEY_PASSWORD") // ANDROID_KEY_PASSWORD
        }
    }

    flavorDimensions  "theme", "android"
    productFlavors {
        dark {
            dimension "theme"
            applicationId "com.schnettler.ethereal"
            signingConfig signingConfigs.etherealRelease

            buildConfigField "String", "BASE_64_LICENSE_KEY", "\"" + ETHEREAL_BASE_64_LICENSE_KEY + "\""
            buildConfigField "String", "APK_SIGNATURE_PRODUCTION", "\"" + ETHEREAL_APK_SIGNATURE_PRODUCTION + "\""
        }
        light {
            dimension "theme"
            applicationId "com.schnettler.outline"
            signingConfig signingConfigs.outlineRelease

            buildConfigField "String", "BASE_64_LICENSE_KEY", "\"" + OUTLINE_BASE_64_LICENSE_KEY + "\""
            buildConfigField "String", "APK_SIGNATURE_PRODUCTION", "\"" + OUTLINE_APK_SIGNATURE_PRODUCTION + "\""
        }
        pie {
            dimension "android"
            minSdkVersion 25
            versionCode 260000 + android.defaultConfig.versionCode
            versionNameSuffix 'P'
        }
        q {
            dimension "android"
            minSdkVersion 28
            versionCode 290000 + android.defaultConfig.versionCode
            versionNameSuffix 'Q'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            buildConfigField "boolean", "ENFORCE_GOOGLE_PLAY_INSTALL", "false"
            buildConfigField "String", "BASE_64_LICENSE_KEY", "\"\""
            buildConfigField "String", "APK_SIGNATURE_PRODUCTION", "\"\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    playConfigs {
        q {
            track = "beta"
            enabled = false
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

play {
    serviceAccountCredentials = file("PlayAPI.json")
    track = "internal"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.github.javiersantos:PiracyChecker:1.2.4'
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.30") {
        transitive = true
    }
}

project.afterEvaluate {
    preBuild.dependsOn prepareManifest
}

boolean shouldEncrypt() {
    ArrayList<String> tasks = project.gradle.startParameter.taskNames
    return SHOULD_ENCRYPT_ASSETS && Arrays.toString(tasks).toLowerCase().contains("release")
}

repositories {
    mavenCentral()
}