import org.apache.tools.ant.filters.ReplaceTokens

import java.util.regex.Matcher
import java.util.regex.Pattern

String flavorString = getCurrentFlavor()
String currentFlavor =  flavorString.contains("transparent") ? "transparent" :  (flavorString.contains("light") ? "light" : "dark")

ext {
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

//Task to Prepare Template for Build Flavors
task prepareManifest(){
    def theme = ""
    def sourceDestination = "/src/main/kotlin/"
    switch (currentFlavor){
        case "light":
            theme = "outline"
            break
        case "dark":
            theme = "ethereal"
            break
        case "transparent":
            theme = "transparent"
            break;
    }
    sourceDestination = "/src/main/kotlin/com/schnettler/" + theme


    //Prepare Manifest
    copy {
        from "/src/main/AndroidManifestTemplate.xml"
        into "/src/main/"
        filter(ReplaceTokens, tokens: [theme: theme])
        rename { String fileName ->
            fileName = "AndroidManifest.xml"
        }
    }
    //Prepare Source Files
    def kotlinDir = new File(getProjectDir(), "/src/main/kotlin/")
    kotlinDir.deleteDir()
    copy {
        from "/src/main/kotlinTemplates"
        into sourceDestination
        filter(ReplaceTokens, tokens: [theme: theme])
    }
}

//Task to get Current Flavor
def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if(tskReqStr.contains( "assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        if(tskReqStr.contains( "generate")) {
            pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
        } else {
            pattern = Pattern.compile("publish(\\w+)(Release|Debug)")
        }
    }

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() ) {
        println"Current Flavor - " + matcher.group(1).toLowerCase()
        return matcher.group(1).toLowerCase()
    }
    else {
        println "NO MATCH FOUND"
        return ""
    }
}